JS在函数内部声明变量时，一定要加 var 关键字，否则声明的变量为全局变量。

1、如何从外部获取局部变量呢？
　　function f1(){
　　　　var n=999;
　　　　function f2(){
　　　　　　alert(n); // 999
　　　　}
　　}
  即在函数内部在定义一个函数！！！f1()中的所有变量对于f2()都是可见的，反过来不成了。这是javascript语言特有的“链式作用域”结构（chain scope），
  子对象会一级一级的向上寻找所有的父对象的变量！
  
2、闭包的概念
  上一节代码中的f2()，就是闭包。闭包：就是能够读取其他函数内部变量的函数。由于在javascript语言中，只有函数内部的子函数才能读取局部变量，
  因此可以把闭包简单理解成 “定义在一个函数内部的函数” ；所以，在本质上，闭包就是将函数内部和外部连接起来的一座桥梁。
  
3、闭包的用途
  第一是读取函数的内部变量，第二是让这些变量的值始终保存在内存中。
  function f1(){
　　　var n=999;
　　　nAdd=function(){n+=1}
　　　function f2(){
　　　　　alert(n);
　　　}
　　　return f2;
　　}
　var result=f1();
　result(); // 999
　nAdd();
　result(); // 1000
 
 其中result实际上就是闭包f2()函数，一共运行两次。证明，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被清除。
 注意：“nAdd=function(){n+=1}”这一行，nAdd是一个全局变量（因为没有 var 关键字），其次nAdd的值是一个匿名函数（anonymous function），
 而这个匿名函数本身也是一个闭包，所以nAdd相当于一个setter，可以在函数外部对函数内部变量进行操作。
 
4、使用闭包的注意点
 第一：由于闭包会使函数中的变量都被保存在内存中，内存消耗大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。
      解决办法是在函数退出之前，将不适用的局部变量全部删除！
 第二：闭包会在父函数外部，改变复函数内部变量的值。所以，如果你把复函数当做对象（object）使用，把闭包当做它的公共方法（public method），
      把内部变量当做它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。
      
5、思考题
  代码1：
  　var name = "The Window";
　　var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
　　　　　　return function(){
　　　　　　　　return this.name;
　　　　　　};
　　　　}
　　};
　　alert(object.getNameFunc()());
  
  代码2：
  var name = "The Window";
　 var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
　　　　　　var that = this;
　　　　　　return function(){
　　　　　　　　return that.name;
　　　　　　};
　　　　}
　　};
　　alert(object.getNameFunc()()); 
 
  
